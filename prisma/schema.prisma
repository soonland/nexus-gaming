generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SocialPlatform {
  // Gaming Platforms
  PSN
  XBOX
  STEAM
  NINTENDO
  EPIC
  BATTLENET
  // Social Networks
  TWITCH
  TWITTER
  INSTAGRAM
  TIKTOK
  YOUTUBE
}

model UserSocialProfile {
  id        String        @id @default(uuid())
  platform  SocialPlatform
  username  String
  url       String?
  user      User          @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
  @@unique([userId, platform])
}

model User {
  id                String                    @id @default(uuid())
  username          String                    @unique
  email             String                    @unique
  password          String
  avatarUrl         String?
  role              Role                      @default(USER)
  isActive          Boolean                   @default(true)
  articles          Article[]
  socialProfiles    UserSocialProfile[]
  lastPasswordChange DateTime                 @default(now())
  lastLogin         DateTime?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  announcements     AdminAnnouncement[]
  articlesReviewing Article[]                @relation("articleReviewer")
  historyActions    ArticleApprovalHistory[] @relation("historyActions")
}

model Company {
  id          String    @id @default(uuid())
  name        String    @unique
  isDeveloper Boolean   @default(false)
  isPublisher Boolean   @default(false)
  gamesAsDev  Game[]    @relation("developer")
  gamesAsPub  Game[]    @relation("publisher")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  articles  Article[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum GameGenre {
  RPG
  ACTION
  ADVENTURE
  SPORTS
  RACING
  STRATEGY
  SHOOTER
  PUZZLE
  SIMULATION
  FIGHTING
}

model Game {
  id          String    @id @default(uuid())
  title       String    @unique
  description String?
  coverImage  String?
  releaseDate DateTime?
  genre       GameGenre?
  developer   Company    @relation("developer", fields: [developerId], references: [id])
  developerId String
  publisher   Company    @relation("publisher", fields: [publisherId], references: [id])
  publisherId String
  platforms   Platform[]
  articles    Article[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Platform {
  id           String    @id @default(uuid())
  name         String    @unique
  manufacturer String
  releaseDate  DateTime?
  games        Game[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Article {
  id                String                    @id @default(uuid())
  title             String
  content           String
  heroImage         String?
  status            ArticleStatus             @default(DRAFT)
  publishedAt       DateTime?
  category          Category                  @relation(fields: [categoryId], references: [id])
  categoryId        String
  user              User                      @relation(fields: [userId], references: [id])
  userId            String
  games             Game[]
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  currentReviewer   User?                     @relation("articleReviewer", fields: [currentReviewerId], references: [id])
  currentReviewerId String?
  approvalHistory   ArticleApprovalHistory[]
}

enum Role {
  USER
  ADMIN
  MODERATOR
  EDITOR
  SENIOR_EDITOR
  SYSADMIN
}

enum ArticleStatus {
  DRAFT
  PENDING_APPROVAL
  NEEDS_CHANGES
  PUBLISHED
  ARCHIVED
  DELETED
}

enum ApprovalAction {
  SUBMITTED      // Soumis pour approbation
  APPROVED       // Approuvé
  CHANGES_NEEDED // Demande de modifications
  PUBLISHED      // Publié
  ARCHIVED       // Archivé
  DELETED        // Supprimé
}

model ArticleApprovalHistory {
  id            String         @id @default(uuid())
  article       Article        @relation(fields: [articleId], references: [id])
  articleId     String
  fromStatus    ArticleStatus
  toStatus      ArticleStatus
  action        ApprovalAction
  comment       String?        // Commentaire de révision
  actionBy      User          @relation("historyActions", fields: [actionById], references: [id])
  actionById    String
  createdAt     DateTime      @default(now())

  @@index([articleId])
  @@index([actionById])
}

enum AnnouncementType {
  INFO
  ATTENTION
  URGENT
}

model AdminAnnouncement {
  id          String    @id @default(uuid())
  message     String
  type        AnnouncementType
  isActive    String   @default("active")
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String

  @@index([createdById])
}
