# Règles de Développement Backend Nexus Gaming

## 1. Structure du Projet

### 1.1 Organisation des Dossiers
```
src/
├── plugins/      # Plugins Fastify (ex: Prisma)
├── routes/       # Routes API
└── types/        # Définitions TypeScript
```

### 1.2 Convention de Nommage
- Fichiers: kebab-case.ts
- Types/Interfaces: PascalCase
- Variables/Fonctions: camelCase
- Routes: kebab-case (ex: /api/game-reviews)

## 2. Standards API

### 2.1 Définition des Routes
Toujours utiliser le schéma complet avec tags, description et validation des réponses.

✅ Bon Exemple:
```typescript
server.get('/', {
  schema: {
    tags: ['games'],
    description: 'Liste tous les jeux avec leur note moyenne',
    response: {
      200: Type.Array(Type.Object({
        id: Type.String(),
        title: Type.String(),
        description: Type.String(),
        releaseDate: Type.Union([Type.String(), Type.Null()]),
        platform: Type.Array(Type.String()),
        averageRating: Type.Union([Type.Number(), Type.Null()])
      }))
    }
  }
})
```

❌ Mauvais Exemple:
```typescript
server.get('/', async (request, reply) => {
  const games = await getGames()
  return reply.send(games)
})
```

## 3. Validation des Données

### 3.1 Schémas de Validation
Définir des schémas de validation pour tous les objets d'entrée/sortie.

✅ Bon Exemple:
```typescript
const gameSchema = Type.Object({
  title: Type.String(),
  description: Type.String(),
  releasePeriod: Type.Optional(Type.Object({
    type: Type.Union([
      Type.Literal('date'),
      Type.Literal('quarter'),
      Type.Literal('month')
    ]),
    value: Type.String()
  })),
  platform: Type.Array(Type.String()),
  publisher: Type.String(),
  developer: Type.String()
})
```

## 4. Gestion des Autorisations

### 4.1 Vérification des Permissions
Toujours vérifier les permissions avant les opérations protégées.

✅ Bon Exemple:
```typescript
server.post('/', {
  onRequest: [server.authenticate],
  handler: async (request: AuthenticatedRequest, reply: FastifyReply) => {
    if (request.user.role !== 'ADMIN') {
      return reply.status(403).send({
        message: 'Action non autorisée'
      })
    }
    // Suite du code...
  }
})
```

## 5. Gestion des Réponses

### 5.1 Format Standard des Réponses
Utiliser des formats de réponse cohérents pour toutes les routes.

✅ Bon Exemple:
```typescript
// Succès
return reply.send(formatGameDates(game))

// Erreur
return reply.status(404).send({
  message: 'Jeu non trouvé'
})
```

### 5.2 Codes HTTP
- 200: Succès
- 201: Création réussie
- 204: Suppression réussie
- 400: Requête invalide
- 401: Non authentifié
- 403: Non autorisé
- 404: Ressource non trouvée
- 500: Erreur serveur

## 6. Helpers et Utilitaires

### 6.1 Fonctions de Formatage
Créer des fonctions utilitaires pour le formatage des données.

✅ Bon Exemple:
```typescript
const formatGameDates = (game: any) => ({
  ...game,
  releaseDate: game.releaseDate ? game.releaseDate.toISOString().split('T')[0] : null,
  createdAt: game.createdAt ? game.createdAt.toISOString() : null,
  updatedAt: game.updatedAt ? game.updatedAt.toISOString() : null
})
```

## 7. Documentation

### 7.1 Documentation des Routes
Chaque route doit inclure:
- Une description claire
- Les paramètres attendus
- Les réponses possibles
- Les permissions requises

✅ Bon Exemple:
```typescript
server.get('/:id', {
  schema: {
    tags: ['games'],
    description: 'Obtenir les détails d\'un jeu spécifique avec ses critiques et articles',
    params: Type.Object({
      id: Type.String({ description: 'ID du jeu' })
    }),
    response: {
      200: Type.Object({/* ... */}),
      404: Type.Object({
        message: Type.String()
      })
    }
  }
})
```

### 7.2 JSDoc
Utiliser JSDoc pour documenter les fonctions complexes et les types.

✅ Bon Exemple:
```typescript
/**
 * Analyse et convertit une période de sortie en date
 * @param releasePeriod - Période de sortie (date, trimestre ou mois)
 * @returns Date formatée ou null si invalide
 */
const parseReleasePeriod = (releasePeriod: any) => {
  // Implementation...
}
